package blockchain;

import java.security.*;
import java.security.spec.ECGenParameterSpec;
public class Wallet {
	
	public PrivateKey privateKey;
	public PublicKey publicKey;
	
	public Wallet()
	{
		this.generateKeyPair();
	}
	
	
	public void generateKeyPair()
	{
		
		
		
			try {
				 // Add Bouncy Castle as a security provider (only needed if not already added globally)
				KeyPairGenerator keyGen = KeyPairGenerator.getInstance("ECDSA","BC");
			    // "ECDSA" -> Specifies that we are using the Elliptic Curve Digital Signature Algorithm
		        // "BC" -> Specifies the Bouncy Castle security provider for cryptographic functions

		        // Step 2: Create a secure random number generator
				SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
				  // "SHA1PRNG" -> A cryptographically secure pseudo-random number generator
		        // SecureRandom ensures that the generated private key is truly random and unpredictable

		        // Step 3: Define elliptic curve parameters
				ECGenParameterSpec ecSpec = new ECGenParameterSpec("prime192v1");
				//initialize the key generator and generate the key 
				keyGen.initialize(ecSpec,random); // 256 bytes provides an accep
				KeyPair keyPair = keyGen.generateKeyPair();
				//getting the public key and private key
				privateKey = keyPair.getPrivate();
				publicKey = keyPair.getPublic();
				
		
		
		
				} catch(Exception e)
				{
		
			
					throw new RuntimeException(e);
				}	
	}

}
