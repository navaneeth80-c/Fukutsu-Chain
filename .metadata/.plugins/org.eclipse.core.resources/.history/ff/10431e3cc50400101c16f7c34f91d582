package blockchain;
import java.security.*;
import java.util.*;

public class Transaction {
	public String transactionId; // hash of the transaction 
	public PublicKey sender; //sender address 
	public PublicKey reciepient ; 
	float value;
	byte[] signature;  //to prevent any others from spending the fund
			 // TransactionInput
	ArrayList<TransactionInput> inputs = new  ArrayList<>();
	ArrayList<TransactionOutput> outputs = new ArrayList<>();
	
	public static int sequence = 0;
	
	
	public Transaction(PublicKey from,PublicKey to,float value,ArrayList<TransactionInput> input)
	{
		this.sender = from;
		this.reciepient = to;
		this.value = value;
		this.inputs = input;
	}
	
	
	
	// this will calculate the transaction hash 
	
	private String calculateHash()
	{
		Transaction.sequence ++;
		
		return StringUtil.applySHA256(StringUtil.getStringFromKey(sender)+StringUtil.getStringFromKey(reciepient)+Float.toString(value));
		
	}
	
	public void generateSignature(PrivateKey privateKey)
	{
		String data = StringUtil.getStringFromKey(sender)+StringUtil.getStringFromKey(reciepient)+Float.toString(value);
		signature = StringUtil.applyECDSASignature(privateKey, data);
	}
	
	public boolean signatureVerification()
	{
		String data = StringUtil.getStringFromKey(sender)+StringUtil.getStringFromKey(reciepient)+Float.toString(value);
		return StringUtil.verifyECDSASignature(reciepient, data, signature);
	}

}




















































